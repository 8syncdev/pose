@startuml User Service

actor "End User" as EU
participant "User Interface" as UI
participant "API Gateway" as AG
participant "UserController" as UC
participant "UserService" as US
participant "AuthMiddleware" as AM
participant "PermissionChecker" as PC
database "User Model" as UM
database "Permission Model" as PM
database "Database" as DB

note right of AM
  Checks if user is authenticated
  Roles: Anonymous, Authenticated User, Staff, Admin
end note

note right of PC
  Checks user's role and permissions
  Roles: Authenticated User, Staff, Admin
end note

note over UC, US
  Controller:
  - Handles HTTP requests
  - Manages authentication and permissions
  - Calls appropriate service methods

  Service:
  - Contains business logic
  - Interacts with models
  - Formats data for output

  Schema:
  - Defines input/output structures for API
  - Used for request/response validation

  Model:
  - Defines data structure for users
  - Interacts with database
end note

== Create User (Public) ==
EU -> UI : Input user details
UI -> AG : POST /users
AG -> UC : create(user: ClientUserInputSchema)
activate UC
UC -> US : create(user: ClientUserInputSchema)
activate US
US -> US : validate_input(user)
alt invalid input
    US --> UC : return ValidationError
    UC --> AG : return 400 Bad Request
    AG --> UI : 400 Bad Request
    UI --> EU : Display validation errors
else valid input
    US -> UM : create_user(user.dict())
    activate UM
    UM -> DB : Create user
    DB --> UM : User created
    UM --> US : return created_user
    deactivate UM
    US -> UM : set_password(user.password)
    activate UM
    UM -> DB : Update password
    DB --> UM : Password updated
    UM --> US : password set
    deactivate UM
    US -> UM : save()
    activate UM
    UM -> DB : Save changes
    DB --> UM : Changes saved
    UM --> US : user saved
    deactivate UM
    US --> UC : return ClientUserOutputSchema
    UC --> AG : return 201 Created
    AG --> UI : 201 Created
    UI --> EU : Display success message
end
deactivate US
deactivate UC

== Update User (Authenticated User) ==
EU -> UI : Edit user details
UI -> AG : PATCH /users/me
AG -> UC : update(user: UpdateClientUserInputSchema)
activate UC
UC -> AM : check_authentication()
activate AM
note right
  Checks if user is authenticated
  Required role: Authenticated User
end note
AM --> UC : authentication result
deactivate AM
alt not authenticated
    UC --> AG : return 401 Unauthorized
    AG --> UI : 401 Unauthorized
    UI --> EU : Display error message
else authenticated
    UC -> US : update_current_user(current_user, edited_user)
    activate US
    US -> US : validate_update_data(edited_user)
    alt invalid data
        US --> UC : return ValidationError
        UC --> AG : return 400 Bad Request
        AG --> UI : 400 Bad Request
        UI --> EU : Display validation errors
    else valid data
        loop for each field in edited_user
            alt field value is not 'string' and field != 'password'
                US -> US : setattr(current_user, field, value)
            else field == 'password'
                US -> UM : set_password(value)
                activate UM
                UM -> DB : Update password
                DB --> UM : Password updated
                UM --> US : password set
                deactivate UM
            end
        end
        US -> UM : save()
        activate UM
        UM -> DB : Save changes
        DB --> UM : Changes saved
        UM --> US : user saved
        deactivate UM
        US --> UC : return ClientUserOutputSchema
        UC --> AG : return 200 OK
        AG --> UI : 200 OK
        UI --> EU : Display success message
    end
    deactivate US
end
deactivate UC

== Get All Users (Admin Only) ==
EU -> UI : Request all users
UI -> AG : GET /admin/users
AG -> UC : get_all()
activate UC
UC -> AM : check_authentication()
activate AM
note right
  Checks if user is authenticated
  Required role: Admin or Staff
end note
AM --> UC : authentication result
deactivate AM
alt not authenticated
    UC --> AG : return 401 Unauthorized
    AG --> UI : 401 Unauthorized
    UI --> EU : Display error message
else authenticated
    UC -> PC : check_permission("view_all_users")
    activate PC
    note right
      Checks if user is admin or staff
    end note
    PC --> UC : permission result
    deactivate PC
    alt no permission
        UC --> AG : return 403 Forbidden
        AG --> UI : 403 Forbidden
        UI --> EU : Display error message
    else has permission
        UC -> US : get_all()
        activate US
        US -> UM : all()
        activate UM
        UM -> DB : Get all users
        DB --> UM : All users data
        UM --> US : return all users
        deactivate UM
        US -> US : paginate_results(users)
        US --> UC : return PaginatedResponse[AdminUserOutputSchema]
        UC --> AG : return 200 OK with paginated response
        AG --> UI : 200 OK with paginated response
        UI --> EU : Display list of users
        deactivate US
    end
end
deactivate UC

== Update User (Admin Only) ==
EU -> UI : Edit user details
UI -> AG : PATCH /admin/users/{user_id}
AG -> UC : update(user_id: int, user: UpdateClientUserInputSchema)
activate UC
UC -> AM : check_authentication()
activate AM
note right
  Checks if user is authenticated
  Required role: Admin or Staff
end note
AM --> UC : authentication result
deactivate AM
alt not authenticated
    UC --> AG : return 401 Unauthorized
    AG --> UI : 401 Unauthorized
    UI --> EU : Display error message
else authenticated
    UC -> PC : check_permission("update_any_user")
    activate PC
    note right
      Checks if user is admin or staff
    end note
    PC --> UC : permission result
    deactivate PC
    alt no permission
        UC --> AG : return 403 Forbidden
        AG --> UI : 403 Forbidden
        UI --> EU : Display error message
    else has permission
        UC -> US : update_current_user(current_user, edited_user, user_id)
        activate US
        US -> UM : get(id=user_id)
        activate UM
        UM -> DB : Get user
        DB --> UM : User data
        UM --> US : return user
        deactivate UM
        US -> US : validate_update_data(edited_user)
        alt invalid data
            US --> UC : return ValidationError
            UC --> AG : return 400 Bad Request
            AG --> UI : 400 Bad Request
            UI --> EU : Display validation errors
        else valid data
            loop for each field in edited_user
                alt field value is not 'string' and field != 'password'
                    US -> US : setattr(user, field, value)
                else field == 'password'
                    US -> UM : set_password(value)
                    activate UM
                    UM -> DB : Update password
                    DB --> UM : Password updated
                    UM --> US : password set
                    deactivate UM
                end
            end
            US -> UM : save()
            activate UM
            UM -> DB : Save changes
            DB --> UM : Changes saved
            UM --> US : user saved
            deactivate UM
            US --> UC : return AdminUserOutputSchema
            UC --> AG : return 200 OK
            AG --> UI : 200 OK
            UI --> EU : Display success message
        end
        deactivate US
    end
end
deactivate UC

== Delete User (Admin Only) ==
EU -> UI : Request to delete user
UI -> AG : DELETE /admin/users/{user_id}
AG -> UC : delete_user(user_id: int)
activate UC
UC -> AM : check_authentication()
activate AM
note right
  Checks if user is authenticated
  Required role: Admin
end note
AM --> UC : authentication result
deactivate AM
alt not authenticated
    UC --> AG : return 401 Unauthorized
    AG --> UI : 401 Unauthorized
    UI --> EU : Display error message
else authenticated
    UC -> PC : check_permission("delete_user")
    activate PC
    note right
      Checks if user is admin
    end note
    PC --> UC : permission result
    deactivate PC
    alt no permission
        UC --> AG : return 403 Forbidden
        AG --> UI : 403 Forbidden
        UI --> EU : Display error message
    else has permission
        UC -> US : delete_user(user_id)
        activate US
        US -> UM : get(id=user_id)
        activate UM
        UM -> DB : Get user
        DB --> UM : User data
        UM --> US : return user
        deactivate UM
        US -> UM : delete()
        activate UM
        UM -> DB : Delete user
        DB --> UM : User deleted
        UM --> US : deletion confirmed
        deactivate UM
        US --> UC : return success message
        UC --> AG : return 204 No Content
        AG --> UI : 204 No Content
        UI --> EU : Display success message
        deactivate US
    end
end
deactivate UC

@enduml
