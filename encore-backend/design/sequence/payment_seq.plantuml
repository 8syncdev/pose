@startuml Payment Service

actor "End User" as EU
participant "User Interface" as UI
participant "API Gateway" as AG
participant "PaymentController" as PC
participant "AuthMiddleware" as AM
participant "PermissionChecker" as PChecker
participant "PaymentService" as PS
participant "CacheService" as CS
database "Payment Model" as PM
database "UserEnrollment Model" as UEM
database "User Model" as UM
database "Course Model" as CM
database "Database" as DB

note right of AM
  Checks if user is authenticated and their role (anonymous, user, staff, admin)
end note

note right of PChecker
  Checks user's role and specific permissions
end note

note over PC, PS
  Controller:
  - Handles HTTP requests
  - Manages authentication and permissions
  - Calls appropriate service methods

  Service:
  - Contains business logic
  - Interacts with models and cache
  - Formats data for output

  Schema:
  - Defines input/output structures for API
  - Used for request/response validation

  Model:
  - Defines data structure for payments
  - Interacts with database
end note

== Get All Payments (Admin Only) ==
EU -> UI : Request all payments
UI -> AG : GET /admin/payments
AG -> PC : get_all()
activate PC
PC -> AM : check_authentication()
activate AM
note right
  Checks if user is authenticated and is admin
end note
AM --> PC : authentication result
deactivate AM
PC -> PChecker : check_admin_permission()
activate PChecker
PChecker --> PC : permission result
deactivate PChecker
alt not authenticated or not admin
    PC --> AG : return 403 Forbidden
    AG --> UI : 403 Forbidden
    UI --> EU : Display error message
else authenticated as admin
    PC -> PS : get_payments()
    activate PS
    PS -> CS : get_cached_payments()
    activate CS
    alt cache hit
        CS --> PS : return cached payments
    else cache miss
        CS --> PS : cache miss
        PS -> PM : get all payments
        activate PM
        PM -> DB : Get all payments
        DB --> PM : All payments data
        PM --> PS : return payments
        deactivate PM
        PS -> PS : format_payment_data(payments)
        PS -> CS : cache_payments(formatted_payments)
        CS --> PS : caching confirmed
    end
    deactivate CS
    PS --> PC : return formatted payments
    deactivate PS
    PC -> PC : paginate_results(payments)
    PC --> AG : return PaginatedResponse[PaymentOutputSchema]
    AG --> UI : 200 OK with paginated response
    UI --> EU : Display list of payments
end
deactivate PC

== Get User's Own Payments ==
EU -> UI : Request own payments
UI -> AG : GET /payments/user
AG -> PC : get_user_payments(user)
activate PC
PC -> AM : check_authentication()
activate AM
note right
  Checks if user is authenticated (any role)
end note
AM --> PC : authentication result
deactivate AM
alt not authenticated
    PC --> AG : return 401 Unauthorized
    AG --> UI : 401 Unauthorized
    UI --> EU : Display error message
else authenticated
    PC -> PS : get_payments_by_user(user)
    activate PS
    PS -> CS : get_cached_user_payments(user)
    activate CS
    alt cache hit
        CS --> PS : return cached user payments
    else cache miss
        CS --> PS : cache miss
        PS -> PM : filter payments by user
        activate PM
        PM -> DB : Get filtered payments
        DB --> PM : Filtered payments data
        PM --> PS : return filtered payments
        deactivate PM
        PS -> PS : format_payment_data(payments)
        PS -> CS : cache_user_payments(formatted_payments, user)
        CS --> PS : caching confirmed
    end
    deactivate CS
    PS --> PC : return formatted payments
    deactivate PS
    PC -> PC : paginate_results(payments)
    PC --> AG : return PaginatedResponse[PaymentOutputSchema]
    AG --> UI : 200 OK with paginated response
    UI --> EU : Display list of user payments
end
deactivate PC

== Create Payment ==
EU -> UI : Initiate payment
UI -> AG : POST /payments
AG -> PC : create_payment(user)
activate PC
PC -> AM : check_authentication()
activate AM
note right
  Checks if user is authenticated (any role)
end note
AM --> PC : authentication result
deactivate AM
alt not authenticated
    PC --> AG : return 401 Unauthorized
    AG --> UI : 401 Unauthorized
    UI --> EU : Display error message
else authenticated
    PC -> PS : create_payment_by_user(user)
    activate PS
    PS -> UEM : get_enrolled_courses(user)
    activate UEM
    UEM -> DB : Get enrolled courses
    DB --> UEM : Enrolled courses data
    UEM --> PS : return enrolled courses
    deactivate UEM
    alt no enrolled courses
        PS --> PC : return empty payment data
    else has enrolled courses
        PS -> PS : calculate_total_amount(enrolled_courses)
        PS -> PM : create_payment(user, amount, courses)
        activate PM
        PM -> DB : Create payment
        DB --> PM : Payment created
        PM --> PS : return created payment
        deactivate PM
        loop for each enrolled course
            PS -> UEM : update_enrollment_status(course, user, STATUS_PENDING)
            activate UEM
            UEM -> DB : Update enrollment status
            DB --> UEM : Status updated
            UEM --> PS : enrollment updated
            deactivate UEM
        end
        PS -> PS : format_payment_data(payment)
        PS --> PC : return formatted payment data
    end
    deactivate PS
    PC -> CS : invalidate_user_payments_cache(user)
    activate CS
    CS --> PC : cache invalidated
    deactivate CS
    PC --> AG : return PaymentOutputSchema
    AG --> UI : 201 Created with payment data
    UI --> EU : Display payment confirmation
end
deactivate PC

== Complete Payment (Admin or Staff Only) ==
EU -> UI : Complete payment
UI -> AG : POST /admin/payments/{id}/complete
AG -> PC : complete_payment(payment_id)
activate PC
PC -> AM : check_authentication()
activate AM
note right
  Checks if user is authenticated and is admin or staff
end note
AM --> PC : authentication result
deactivate AM
PC -> PChecker : check_admin_or_staff_permission()
activate PChecker
PChecker --> PC : permission result
deactivate PChecker
alt not authenticated or not admin/staff
    PC --> AG : return 403 Forbidden
    AG --> UI : 403 Forbidden
    UI --> EU : Display error message
else authenticated as admin or staff
    PC -> PS : done_payment(payment_id)
    activate PS
    PS -> PM : get_payment(payment_id)
    activate PM
    PM -> DB : Get payment
    DB --> PM : Payment data
    PM --> PS : return payment
    deactivate PM
    alt payment not found or not pending
        PS --> PC : return error message
    else payment is pending
        PS -> PS : validate_payment(payment)
        alt payment invalid
            PS -> PM : update_payment_status(payment, STATUS_FAILED)
            activate PM
            PM -> DB : Update payment status
            DB --> PM : Status updated
            PM --> PS : payment updated
            deactivate PM
        else payment valid
            loop for each course in payment
                PS -> UEM : update_enrollment_status(course, user, STATUS_COMPLETED)
                activate UEM
                UEM -> DB : Update enrollment status
                DB --> UEM : Status updated
                UEM --> PS : enrollment updated
                deactivate UEM
                PS -> CM : update_course_stats(course)
                activate CM
                CM -> DB : Update course stats
                DB --> CM : Stats updated
                CM --> PS : course stats updated
                deactivate CM
            end
            PS -> PM : update_payment_status(payment, STATUS_COMPLETED)
            activate PM
            PM -> DB : Update payment status
            DB --> PM : Status updated
            PM --> PS : payment updated
            deactivate PM
        end
        PS -> PS : generate_payment_receipt(completed_payment)
        PS --> PC : return success message and receipt
    end
    deactivate PS
    PC -> CS : invalidate_user_payments_cache(payment.user)
    activate CS
    CS --> PC : cache invalidated
    deactivate CS
    PC --> AG : return PaymentCompletionResponse
    AG --> UI : 200 OK with completion response
    UI --> EU : Display payment completion confirmation
end
deactivate PC

== Get Pending Payments (Admin or Staff Only) ==
EU -> UI : Request pending payments
UI -> AG : GET /admin/payments/pending
AG -> PC : get_pending_payments()
activate PC
PC -> AM : check_authentication()
activate AM
note right
  Checks if user is authenticated and is admin or staff
end note
AM --> PC : authentication result
deactivate AM
PC -> PChecker : check_admin_or_staff_permission()
activate PChecker
PChecker --> PC : permission result
deactivate PChecker
alt not authenticated or not admin/staff
    PC --> AG : return 403 Forbidden
    AG --> UI : 403 Forbidden
    UI --> EU : Display error message
else authenticated as admin or staff
    PC -> PS : get_pending_payments()
    activate PS
    PS -> PM : filter(status=STATUS_PENDING)
    activate PM
    PM -> DB : Get pending payments
    DB --> PM : Pending payments data
    PM --> PS : return pending payments
    deactivate PM
    PS -> PS : format_payment_data(pending_payments)
    PS --> PC : return formatted pending payments
    deactivate PS
    PC -> PC : paginate_results(pending_payments)
    PC --> AG : return PaginatedResponse[PaymentOutputSchema]
    AG --> UI : 200 OK with paginated response
    UI --> EU : Display list of pending payments
end
deactivate PC

@enduml